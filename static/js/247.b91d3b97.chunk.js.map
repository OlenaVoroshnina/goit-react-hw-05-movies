{"version":3,"file":"static/js/247.b91d3b97.chunk.js","mappings":"kOAoDA,UA/Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA6BT,GAA7B,uFAEII,GAAa,GAFjB,UAGwBM,EAAAA,EAAAA,IAAiBV,GAHzC,OAGUO,EAHV,OAIIC,EAASD,EAAMI,MAJnB,gDAMIL,EAAS,KAAMM,SANnB,yBAQIR,GAAa,GARjB,4EADc,yBAAC,SAAD,2BAadS,CAAcb,EACf,GAAE,CAACA,KAGF,0BACGG,IAAa,SAAC,IAAD,IACbI,EAAMO,OAAS,GACdP,EAAMQ,KAAI,SAAAJ,GACR,IAAQK,EAAiCL,EAAjCK,aAAcC,EAAmBN,EAAnBM,KAAMC,EAAaP,EAAbO,UAC5B,OACE,0BACGC,QAAQH,KACP,gBACEI,IAAG,0CAAqCJ,GACxCK,IAAKJ,EACLK,MAAM,MAGV,wBAAKL,KACL,uCAAeC,OATRD,EAYZ,IACFZ,IAAS,wBAAKA,MAGpB,C,+LCjDDkB,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAgB,mCAAG,sGACPD,EAAAA,EAAAA,IACrB,gEAF4B,uBACtBE,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAY,mCAAG,WAAM1B,GAAN,yFACHuB,EAAAA,EAAAA,IAAA,iBACXvB,EADW,8CADG,uBAClByB,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZf,EAAgB,mCAAG,WAAMV,GAAN,yFACPuB,EAAAA,EAAAA,IAAA,iBACXvB,EADW,sDADO,uBACtByB,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAOhBE,EAAkB,mCAAG,WAAM3B,GAAN,yFACTuB,EAAAA,EAAAA,IAAA,iBACXvB,EADW,sDADS,uBACxByB,EADwB,EACxBA,KADwB,kBAIzBA,GAJyB,2CAAH,sDAOlBG,EAAW,mCAAG,WAAMC,GAAN,yFACFN,EAAAA,EAAAA,IAAA,sFAC0DM,EAD1D,gCADE,uBACjBJ,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,qD","sources":["components/Cast/Cast.jsx","service/service.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { getMovieByIdCast } from 'service/service';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  //   const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [casts, setCasts] = useState([]);\n\n  useEffect(() => {\n    async function movieByIdCast(movieId) {\n      try {\n        setIsLoading(true);\n        const casts = await getMovieByIdCast(movieId);\n        setCasts(casts.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    movieByIdCast(movieId);\n  }, [movieId]);\n\n  return (\n    <ul>\n      {isLoading && <Loader />}\n      {casts.length > 0 &&\n        casts.map(cast => {\n          const { profile_path, name, character} = cast;\n          return (\n            <li key={name}>\n              {Boolean(profile_path) && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                  width=\"\"\n                />\n              )}\n              <h4>{name}</h4>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      {error && <h1>{error}</h1>}\n    </ul>\n  );\n};\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovie = async () => {\n  const { data } = await axios.get(\n    '/trending/movie/day?api_key=3935c979547c0c6651e8430ea668493f'\n  );\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=3935c979547c0c6651e8430ea668493f`\n  );\n  return data;\n};\n\nexport const getMovieByIdCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=3935c979547c0c6651e8430ea668493f`\n  );\n  return data;\n};\n\nexport const getMovieByIdReview = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=3935c979547c0c6651e8430ea668493f`\n  );\n  return data;\n};\n\nexport const searchMovie = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=3935c979547c0c6651e8430ea668493f&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return data;\n};\n"],"names":["movieId","useParams","useState","isLoading","setIsLoading","error","setError","casts","setCasts","useEffect","getMovieByIdCast","cast","message","movieByIdCast","length","map","profile_path","name","character","Boolean","src","alt","width","axios","getTrendingMovie","data","getMovieById","getMovieByIdReview","searchMovie","query"],"sourceRoot":""}